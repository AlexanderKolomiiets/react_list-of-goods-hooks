{"version":3,"sources":["App.tsx","GoodsList.tsx","index.tsx"],"names":["SortType","GoodsList","goods","map","good","goodsFromServer","App","useState","isReversed","setReverse","NONE","sortType","setType","sortedGoods","sort","goodA","goodB","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","classNames","onClick","state","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,4DCfQC,EAA6B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC3C,OACE,6BACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,oBAAe,UAAQ,OAAvB,SACGA,GADMA,SDFJC,G,YAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,Y,SAGGL,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAqCE,IAAMM,EAAgB,WAC3B,MAAiCC,oBAAS,GAA1C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA4BF,mBAASP,EAASU,MAA9C,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMV,EA9BD,SACLA,EADK,GAGJ,IADCS,EACF,EADEA,SAAUH,EACZ,EADYA,WAENK,EAAW,YAAOX,GAmBxB,OAjBAW,EAAYC,MAAK,SAACC,EAAOC,GACvB,OAAQL,GACN,KAAMX,EAASiB,SACb,OAAOF,EAAMG,cAAcF,GAE7B,KAAMhB,EAASmB,OACb,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAITZ,GACFK,EAAYQ,UAGPR,EAOOS,CAAkBjB,EAAiB,CAAEM,WAAUH,eAmB7D,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYd,IAAaX,EAASiB,WAEtCS,QAtBiB,WACvBd,EAAQZ,EAASiB,WAeb,iCAWA,wBACEO,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYd,IAAaX,EAASmB,SAEtCO,QA7BmB,WACzBd,EAAQZ,EAASmB,SAsBb,4BAWA,wBACEK,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAA2B,IAAfjB,IAEhBkB,QAhDc,WACpBjB,GAAW,SAAAkB,GAAK,OAAKA,MAyCjB,sBAWEhB,IAAaX,EAASU,OAAuB,IAAfF,IAE9B,wBACEgB,KAAK,SACLD,UAAU,4BACVG,QA9CU,WAClBd,EAAQZ,EAASU,MACjBD,GAAW,IAyCL,sBAUJ,cAAC,EAAD,CAAWP,MAAOA,QE5HxB0B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.84a186ab.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { GoodsList } from './GoodsList';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const sortedGoods = [...goods];\n\n  sortedGoods.sort((goodA, goodB) => {\n    switch (sortType) {\n      case (SortType.ALPHABET):\n        return goodA.localeCompare(goodB);\n\n      case (SortType.LENGTH):\n        return goodA.length - goodB.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    sortedGoods.reverse();\n  }\n\n  return sortedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setReverse] = useState(false);\n  const [sortType, setType] = useState(SortType.NONE);\n\n  const goods = getReorderedGoods(goodsFromServer, { sortType, isReversed });\n\n  const handleReverse = () => {\n    setReverse(state => !state);\n  };\n\n  const handleSortByAlph = () => {\n    setType(SortType.ALPHABET);\n  };\n\n  const handleSortByLength = () => {\n    setType(SortType.LENGTH);\n  };\n\n  const handleReset = () => {\n    setType(SortType.NONE);\n    setReverse(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={handleSortByAlph}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={handleSortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            { 'is-light': isReversed === false },\n          )}\n          onClick={handleReverse}\n        >\n          Reverse\n        </button>\n\n        {(sortType !== SortType.NONE || isReversed !== false)\n        && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <GoodsList goods={goods} />\n    </div>\n  );\n};\n","type Props = {\n  goods: string[]\n};\n\nexport const GoodsList: React.FC<Props> = ({ goods }) => {\n  return (\n    <ul>\n      {goods.map(good => (\n        <li key={good} data-cy=\"Good\">\n          {good}\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}