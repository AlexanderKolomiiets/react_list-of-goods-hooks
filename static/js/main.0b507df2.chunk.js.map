{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setReverse","NONE","sortType","setType","goods","visibleGoods","sort","goodA","goodB","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","onClick","state","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAqCE,IAAME,EAAgB,WAC3B,MAAiCC,oBAAS,GAA1C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA4BF,mBAASH,EAASM,MAA9C,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EA9BD,SACLA,EADK,GAGJ,IADCF,EACF,EADEA,SAAUH,EACZ,EADYA,WAENM,EAAY,YAAOD,GAmBzB,OAjBAC,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQN,GACN,KAAMP,EAASc,SACb,OAAOF,EAAMG,cAAcF,GAE7B,KAAMb,EAASgB,OACb,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAITb,GACFM,EAAaQ,UAGRR,EAOOS,CAAkBlB,EAAiB,CAAEM,WAAUH,eAmB7D,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,yBACPb,IAAaP,EAASc,SAClB,WACA,IACNQ,QAtBW,WACjBd,EAAQR,EAASc,WAeb,iCAWA,wBACEO,KAAK,SACLD,UAAS,4BACPb,IAAaP,EAASgB,OAClB,WACA,IACNM,QA7Ba,WACnBd,EAAQR,EAASgB,SAsBb,4BAWA,wBACEK,KAAK,SACLD,UAAS,6BACQ,IAAfhB,EACI,WACA,IACNkB,QAhDQ,WACdjB,GAAW,SAAAkB,GAAK,OAAKA,MAyCjB,sBAWEhB,IAAaP,EAASM,OAAuB,IAAfF,IAE9B,wBACEiB,KAAK,SACLD,UAAU,4BACVE,QA9CI,WACZd,EAAQR,EAASM,MACjBD,GAAW,IAyCL,sBAUJ,6BACE,6BACGI,EAAMe,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SACGA,eC9HfC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0b507df2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((goodA, goodB) => {\n    switch (sortType) {\n      case (SortType.ALPHABET):\n        return goodA.localeCompare(goodB);\n\n      case (SortType.LENGTH):\n        return goodA.length - goodB.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setReverse] = useState(false);\n  const [sortType, setType] = useState(SortType.NONE);\n\n  const goods = getReorderedGoods(goodsFromServer, { sortType, isReversed });\n\n  const reverse = () => {\n    setReverse(state => !state);\n  };\n\n  const sortByAlph = () => {\n    setType(SortType.ALPHABET);\n  };\n\n  const sortByLength = () => {\n    setType(SortType.LENGTH);\n  };\n\n  const reset = () => {\n    setType(SortType.NONE);\n    setReverse(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button is-info ${\n            sortType !== SortType.ALPHABET\n              ? 'is-light'\n              : ''}`}\n          onClick={sortByAlph}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-success ${\n            sortType !== SortType.LENGTH\n              ? 'is-light'\n              : ''}`}\n          onClick={sortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning ${\n            isReversed === false\n              ? 'is-light'\n              : ''}`}\n          onClick={reverse}\n        >\n          Reverse\n        </button>\n\n        {(sortType !== SortType.NONE || isReversed !== false)\n        && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {goods.map(good => (\n            <li data-cy=\"Good\">\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}